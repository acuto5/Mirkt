<?php

namespace Tests\Feature\Routes;

use Illuminate\Routing\RouteCollection;
use Illuminate\Support\Facades\Route;
use Tests\TestCase;

class RoutesMiddlewareTest extends TestCase
{
    /**
     * @var RouteCollection
     */
    private $routesCollection;

    /**
     * @var array
     */
    private $noMiddleware = ['web'];

    /**
     * @var array
     */
    private $authMiddleWare = ['web', 'auth'];

    /**
     * @var array
     */
    private $guestMiddleWare = ['web', 'guest'];

    /**
     * @var array
     */
    private $adminMiddleware = ['web', 'auth', 'role:admin'];

    /**
     * @var array
     */
    private $superAdminMiddleware = ['web', 'auth', 'role:super'];

    /**
     * @var array
     */
    private $moderatorMiddleware = ['web', 'auth', 'role:moderator'];

    /**
     * @var array
     */
    private $routesNamesWithoutMiddleware = [
        'getHomeArticles',
        'getContacts',
        'getWebsiteInfo',
        'getArticlesByTagName',
        'getCategories',
        'getCategoryArticles',
        'getCategoriesAndSubCategories',
        'getSubCategories',
        'getArticlesBySubCategoryName',
        'getArticle',
        'getAllPublishedArticles',
        'searchInPublishedArticles'
    ];

    /**
     * @var array
     */
    private $routesNamesForGuest = [
        'login',
        'register',
    ];

    /**
     * @var array
     */
    private $routesNamesForSuperAdmin = [
        'updateContacts',
        'updateWebsiteInfo'
    ];

    /**
     * @var array
     */
    private $routesNamesForAuth = [
        'logout',
        'updateUserProfile',
    ];

    /**
     * @var array
     */
    private $routesNamesForModerator = [
        'getAllTags',
        'getTags',
        'storeTag',
        'updateTag',
        'destroyTag',
        'addSubCategory',
        'editSubCategory',
        'deleteSubCategory',
        'levelUpSubCategory',
        'levelDownSubCategory',
        'postArticle',
        'editArticle',
        'deleteArticle',
        'getAllDraftArticles',
        'searchInDraftArticles',
        'markArticleAsDraft',
        'markArticleAsPublished'
    ];

    /**
     * @var array
     */
    private $routesNamesForAdmin = [
        'addCategory',
        'editCategory',
        'deleteCategory',
        'levelUpCategory',
        'levelDownCategory'
    ];

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Get all registered routes
        $this->routesCollection = Route::getRoutes();
    }

    /**
     * Test routes without middleware
     */
    public function testRoutesWithoutMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesWithoutMiddleware, $this->noMiddleware);
    }

    /**
     * Test guest routes middleware
     */
    public function testGuestRoutesMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesForGuest, $this->guestMiddleWare);
    }

    /**
     * Test auth routes middleware
     */
    public function testAuthRoutesMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesForAuth, $this->authMiddleWare);
    }

    /**
     * Test moderator routes middleware
     */
    public function testModeratorRoutesMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesForModerator, $this->moderatorMiddleware);
    }

    /**
     * Test admin routes middleware
     */
    public function testAdminRoutesMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesForAdmin, $this->adminMiddleware);
    }

    /**
     * Test super admin routes middleware
     */
    public function testSuperAdminRoutesMiddleware(): void
    {
        $this->assertRouteMiddleware($this->routesNamesForSuperAdmin, $this->superAdminMiddleware);
    }

    /**
     * Assert route middleware
     *
     * @param array $routeNames
     * @param array $hasMiddleware
     */
    private function assertRouteMiddleware(array $routeNames, array $expectedMiddleware): void
    {
        foreach ($routeNames as $routeName) {
            // Assert is route names is set
            if ($this->assertRouteNameIsSet($routeName)) {

                // Get route
                $route = $this->routesCollection->getByName($routeName);

                // Assert route contains given middleware
                $this->assertEquals($expectedMiddleware, $route->gatherMiddleware());
            }
        }
    }

    /**
     * Assert route name is set and return bool
     *
     * @param string $name
     *
     * @return bool
     */
    private function assertRouteNameIsSet(string $name): bool
    {
        $bool = $this->routesCollection->hasNamedRoute($name);

        $this->assertTrue($bool);


        return $bool;
    }
}
