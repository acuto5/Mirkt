<?php

namespace Tests\Feature\Controllers\Tags;

use App\Tag;
use App\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class TagsControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var Collection
     */
    private $tags;

    /**
     * @var User
     */
    private $moderatorUser;

    /**
     * @var string
     */
    private $getAllTagsRoute;

    /**
     * @var string
     */
    private $indexRoute;

    /**
     * @var int
     */
    private $tagsPerPage;

    /**
     * @var string
     */
    private $storeRoute;

    /**
     * @var string
     */
    private $updateRoute;

    /**
     * @var string
     */
    private $deleteRoute;

    /**
     * Set up
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->tagsPerPage = 10;
        $this->indexRoute = route('getTags');
        $this->storeRoute = route('storeTag');
        $this->updateRoute = route('updateTag');
        $this->deleteRoute = route('destroyTag');
        $this->tags = factory(Tag::class, 15)->create();
        $this->getAllTagsRoute = route('getAllTags');
        $this->adminUser = factory(User::class)->states('admin')->create();
        $this->moderatorUser = factory(User::class)->states('moderator')->create();
        $this->superAdminUser = factory(User::class)->states('superAdmin')->create();

        /**
         * Login user as moderator
         */
        Auth::login($this->moderatorUser);
    }

    /**
     * Test get all tags
     */
    public function testGetAll(): void
    {
        /**
         * Params for request
         */
        $requestParams = ['get', $this->getAllTagsRoute];

        /**
         * Make new request
         */
        $response = $this->json(...$requestParams);

        /**
         * Check is response is same as expected
         */
        $response->assertExactJson($this->tags->toArray());
    }

    /**
     * Test index
     */
    public function testIndex(): void
    {
        /**
         * Request params
         */
        $requestParams = ['get', $this->indexRoute];

        /**
         * Make request
         */
        $response = $this->json(...$requestParams);

        /**
         * Check is request was successful
         */
        $response->assertSuccessful();

        /**
         * Make paginator
         */
        $tagsPaginator = new LengthAwarePaginator(
            $this->tags->take($this->tagsPerPage),
            $this->tags->count(),
            $this->tagsPerPage
        );

        /**
         * Check is same response as expected
         */
        $response->assertExactJson($tagsPaginator->setPath($this->indexRoute)->toArray());

        /**
         * Search result is not tested, because results can be to different.
         * Create tags very different, if you want test search results.
         */
    }

    /**
     * Test store tag
     */
    public function testStoreTag()
    {
        /**
         * Request params
         */
        $requestParams = ['post', $this->storeRoute, ['name' => 'storeTagTest']];

        /**
         * Make request
         */
        $response = $this->json(...$requestParams);

        /**
         * Check is request is successful
         */
        $response->assertSuccessful();
    }

    /**
     * Test update tag
     */
    public function testUpdateTag()
    {
        /**
         * Request params
         */
        $requestParams = ['patch', $this->updateRoute, ['id' => $this->tags->first()->id, 'name' => 'updateTagTest']];

        /**
         * Make request
         */
        $response = $this->json(...$requestParams);

        /**
         * Check status
         */
        $response->assertSuccessful();

        /**
         * Check if tag is changed correctly
         */
        $this->assertEquals($requestParams[2], Tag::first()->toArray());
    }

    public function testDestroyTag()
    {
        /**
         * Make request
         */
        $response = $this->json('delete', $this->deleteRoute, ['id' => Tag::first()->id]);

        /**
         * Check is request has successful
         */
        $response->assertSuccessful();
    }
}
