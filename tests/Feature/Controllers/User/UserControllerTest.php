<?php

namespace Tests\Feature\Controllers\User;

use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    private $user;
    private $route;
    private $userEmail;
    private $loginRoute;
    private $loginMethod;
    private $userPassword;
    private $updateMethod;
    private $newUserEmail;
    private $newUserPassword;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->loginMethod = 'post';
        $this->updateMethod = 'patch';
        $this->userPassword = 'password';
        $this->userEmail = 'mirkt@mirkt.lt';
        $this->newUserPassword = 'newPassword';
        $this->newUserEmail = 'mirkt1@mirkt.lt';
        $this->loginRoute = route('login');
        $this->route = route('updateUserProfile');

        // Create user
        $this->user = factory(User::class)->create([
            'password' => bcrypt($this->userPassword),
            'email' => $this->userEmail
        ]);

        // Login user
        Auth::login($this->user);
    }

    /**
     * Base check if nothing is changed
     */
    public function testUpdate(): void
    {
        // Check if login as user
        $this->assertAuthenticatedAs($this->user);

        // Make user update request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword
        ]);

        // Is user updated successfully
        $response->assertStatus(200);

        // Check if user logout on success
        $this->assertGuest();
    }

    /**
     * Check is error thrown if Password and email is not set
     */
    public function testValidationErrorsIfPasswordAndEmailIsNotSet(): void
    {
        // Check is logged in
        $this->assertAuthenticatedAs($this->user);

        // Make user update request
        $response = $this->json($this->updateMethod, $this->route, []);

        // Check if response has errors
        $response->assertJsonValidationErrors(['password', 'email']);

        // Check status code
        $response->assertStatus(422);

        // Check if user still logged in
        $this->assertAuthenticatedAs($this->user);
    }

    /**
     * Check is password changed
     */
    public function testCheckIfPasswordChanged(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'password' => $this->userPassword,
            'email' => $this->userEmail,
            'new_password' => $this->newUserPassword,
            'new_password_confirmation' => $this->newUserPassword
        ]);

        // Password changed
        $response->assertStatus(200);

        // User is logged out
        $this->assertGuest();

        // Login user with new password
        $response = $this->json($this->loginMethod, $this->loginRoute, [
            'email' => $this->userEmail,
            'password' => $this->newUserPassword
        ]);

        $response->assertStatus(200);

        $this->assertAuthenticated();
    }

    /**
     * Test new_password and new_password_confirmation throw error if don`t mach
     */
    public function testHasErrorsThenNewPasswordDosntMach(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword,
            'new_password' => $this->newUserPassword,
            'new_password_confirmation' => $this->newUserPassword . '1'
        ]);

        // Check if has errors
        $response->assertJsonValidationErrors(['new_password']);

        // Password changed
        $response->assertStatus(422);

        // Check if user still logged in
        $this->assertAuthenticatedAs($this->user);
    }

    /**
     * Change email
     */
    public function testIsEmailChange(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'password' => $this->userPassword,
            'email' => $this->newUserEmail
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user is logged out
        $this->assertGuest();

        // Login with new email
        $response = $this->json($this->loginMethod, $this->loginRoute, [
            'email' => $this->newUserEmail,
            'password' => $this->userPassword
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged in
        $this->assertAuthenticated();
    }

    /**
     * Change email and password in same time
     */
    public function testIsEmailAndPasswordChangedInSameTime(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->newUserEmail,
            'password' => $this->userPassword,
            'new_password' => $this->newUserPassword,
            'new_password_confirmation' => $this->newUserPassword
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user is logged out
        $this->assertGuest();

        // Login with new email and password
        $response = $this->json($this->loginMethod, $this->loginRoute, [
            'email' => $this->newUserEmail,
            'password' => $this->newUserPassword
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged in
        $this->assertAuthenticated();
    }

    /**
     * Check if user can mark him self as Admin
     */
    public function testMarkHimSelfAsAdmin(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword,
            'is_admin' => 1,
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged out
        $this->assertGuest();

        // Update user data
        $this->user = User::find($this->user->id);

        // Check is user has Admin role
        $this->assertEquals($this->user->is_admin, 1);
    }

    /**
     * Check if user can mark him self as Moderator
     */
    public function testMarkHimSelfAsModerator(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword,
            'is_moderator' => 1,
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged out
        $this->assertGuest();

        // Update user data
        $this->user = User::find($this->user->id);

        // Check is user has Admin role
        $this->assertEquals($this->user->is_moderator, 1);
    }

    /**
     * Check if user can remove
     */
    public function testRemoveAdminRole(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword,
            'is_admin' => 0,
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged out
        $this->assertGuest();

        // Update user data
        $this->user = User::find($this->user->id);

        // Check is user has Admin role
        $this->assertEquals($this->user->is_admin, 0);
    }

    /**
     * Check if user can remove Moderator role
     */
    public function testRemoveModeratorRole(): void
    {
        // Check if user logged in
        $this->assertAuthenticatedAs($this->user);

        // Make request
        $response = $this->json($this->updateMethod, $this->route, [
            'email' => $this->userEmail,
            'password' => $this->userPassword,
            'is_moderator' => 0,
        ]);

        // Check status code
        $response->assertStatus(200);

        // Check is user logged out
        $this->assertGuest();

        // Update user data
        $this->user = User::find($this->user->id);

        // Check is user has Admin role
        $this->assertEquals($this->user->is_moderator, 0);
    }
}
