<?php

namespace Tests\Feature\Middleware;

use App\Http\Middleware\Role;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class RoleTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var \Illuminate\Http\Request
     */
    private $request;

    /**
     * @var User
     */
    private $adminUser;

    /**
     * @var User
     */
    private $simpleUser;

    /**
     * @var User
     */
    private $moderatorUser;

    /**
     * @var Role
     */
    private $roleMiddleware;

    /**
     * @var User
     */
    private $superAdminUser;

    /**
     * @var string
     */
    private $adminRoleString = 'admin';

    /**
     * @var string
     */
    private $superAdminRoleString = 'super';

    /**
     * @var string
     */
    private $moderatorRoleString = 'moderator';

    /**
     * Set up
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->roleMiddleware = new Role();
        $this->simpleUser = factory(User::class)->create();
        $this->request = Request::create('/phpunit/admin', 'get');
        $this->adminUser = factory(User::class)->states('admin')->create();
        $this->moderatorUser = factory(User::class)->states('moderator')->create();
        $this->superAdminUser = factory(User::class)->states('superAdmin')->create();
    }

    /**
     * Assert simple user don`t get through moderator, admin and super admin middleware.
     */
    public function testSimpleUser(): void
    {
        // Assert simple user don`t have admin role
        $this->assertMiddleware(401, $this->simpleUser, $this->adminRoleString);

        // Assert simple user don`t have moderator role
        $this->assertMiddleware(401, $this->simpleUser, $this->moderatorRoleString);

        // Assert simple user don`t have super admin role
        $this->assertMiddleware(401, $this->simpleUser, $this->superAdminRoleString);
    }

    /**
     * Assert moderator user don`t get through admin and super admin middleware,
     * but can go through own middleware.
     */
    public function testModeratorRole(): void
    {
        // Assert moderator can make through middleware
        $this->assertMiddleware(200, $this->moderatorUser, $this->moderatorRoleString);

        // Assert moderator don`t get through admin middleware
        $this->assertMiddleware(401, $this->moderatorUser, $this->adminRoleString);

        // Assert moderator don`t get through super admin middleware
        $this->assertMiddleware(401, $this->moderatorUser, $this->superAdminRoleString);
    }

    /**
     * Assert admin user don`t get through super admin middleware,
     * but can go through own and moderator middleware.
     */
    public function testAdminRole(): void
    {
        // assert admin can make through moderator middleware
        $this->assertMiddleware(200, $this->adminUser, $this->moderatorRoleString);

        // assert admin can make through middleware
        $this->assertMiddleware(200, $this->adminUser, $this->adminRoleString);

        // Assert admin don`t get through super admin middleware
        $this->assertMiddleware(401, $this->adminUser, $this->superAdminRoleString);
    }

    /**
     * Assert super admin can get through all middleware.
     */
    public function testSuperAdminRole(): void
    {
        // assert super admin can make through moderator middleware
        $this->assertMiddleware(200, $this->superAdminUser, $this->moderatorRoleString);

        // assert super admin can make through admin middleware
        $this->assertMiddleware(200, $this->superAdminUser, $this->adminRoleString);

        // assert super admin can make through middleware
        $this->assertMiddleware(200, $this->superAdminUser, $this->superAdminRoleString);
    }

    /**
     * Assert middleware
     *
     * @param int       $expectingStatusCode
     * @param \App\User $user
     * @param string    $role
     */
    private function assertMiddleware(int $expectingStatusCode, User $user, string $role): void
    {
        // Login user
        Auth::login($user);

        // Add user to request instance
        $this->request->setUserResolver(function () use ($user) {
            return $user;
        });

        // Handel request and get response instance
        $response = $this->roleMiddleware->handle($this->request, function () {
            return $this->app->make(\Illuminate\Http\Response::class);
        }, $role);

        // Assert is status code is as expected
        $this->assertEquals($expectingStatusCode, $response->getStatusCode());

        // Assert error message on unauthorized request
        if ($response->getStatusCode() !== 200) {
            $this->assertEquals($this->getErrorCode($role), $response->content());
        }
    }

    /**
     * Get error message
     */
    private function getErrorCode(string $role): string
    {
        return '{"message":"You don\'t have ' . $role . ' role."}';
    }
}
