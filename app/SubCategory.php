<?php

namespace App;

use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class SubCategory extends Model
{
    /**
     * The attributes that should be visible in arrays.
     * @var array
     */
    protected $visible = ['id', 'category_id', 'category', 'name', 'level', 'articles', 'latestEightPublishedArticles'];
    
    /**
     * Field in database will be available for mass assignment.
     * @var array
     */
    protected $fillable = ['category_id', 'name', 'level'];
    
    /**
     * Relationship with category
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category(): BelongsTo
    {
        return $this->belongsTo('App\\Category', 'category_id');
    }
    
    /**
     * Relationships with articles
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function articles(): HasMany
    {
        return $this->hasMany('App\Article', 'sub_category_id');
    }
    
    /**
     * Clean name from html
     *
     * @param string $name
     */
    public function setNameAttribute(string $name): void
    {
        $this->attributes['name'] = clean($name);
    }
    
    /**
     * Get latest eight published articles
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function latestEightPublishedArticles(): HasMany
    {
        return $this->hasMany('App\Article', 'sub_category_id')
            ->where('is_draft', 0)
            ->with('headerImage')
            ->latest()
            ->take(8);
    }
    
    /**
     * Remove relationships and delete sub-category
     * @return bool|null
     */
    public function forceDelete(): ?bool
    {
        $articles = $this->articles()->get();
        
        $articles->map->forceDelete();
        
        return parent::forceDelete(); // TODO: Change the autogenerated stub
    }
}
